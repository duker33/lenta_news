Тестовое задание
================
В этом репозитории реализация тестового задания. Формулировка задачи в конце этого описания.


Комментарии к реализации
========================
- У меня возникла проблема с кодировками при рендере pdf. Разбираться не стал. Если это принципиальный момент - исправлю.
- Периодическое сохранение новостей в базу `реализовал <http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#using-custom-scheduler-classes>`__ через django-celery-beat. Поэтому кода для schedule tasks нету - `кладу таски <http://prntscr.com/dlaydp>`__ через админку.
- На внешнем сервере сервис пока не развернул, т.к. спешу показать код. Разверну чуть позже, если это будет необходимо.


Требования по задаче
====================
Требуется разработать приложение, которое будет строить дайджест новостей с сайта http://lenta.ru. Дайджест  это выборка новостей (дата, название и краткое описание) за определенный промежуток дат по определенным категориям.

Новости запрашиваются приложением раз в несколько минут по RSS, после чего лента разбирается и свежие новости сохраняются в БД. На фронтенде должна быть форма с автодополнением списка категорий, вводом двух дат (от и до) и адресом email.

По запросу из формы должен генерироваться PDF-документ с дайджестом статей по запрошенным категориям. Затем документ должен отправляться на запрошенный адрес по электронной почте.

Приложение архитектурно должно быть рассчитано на обработку большого числа параллельных запросов, так что длительные операции: получение RSS, генерация PDF, отправка email  нужно вынести из основного процесса. Для этих целей можно использовать очередь сообщений (например, celery). Для генерации PDF по html есть простая и удобная библиотека xhtml2pdf.

Платформа  Django, для разбора RSS можно применить любое удобное решение (от lxml.etree до BeautifulSoup). Периодический запрос данных очень желательно реализовать средствами проекта (например, в celery есть такая возможность), не используя системный crontab.

Дополнительный бонус за современную реализацию фронтенда и разделение через api.
